<?xml version="1.0" encoding="UTF-8"?>
<opml version="1.0">
	<head>
		<dateCreated>Mon Feb 18 2019 20:08:55 GMT+0100 (Central European Standard Time)</dateCreated>
		<dateModified>Mon Feb 18 2019 20:08:55 GMT+0100 (Central European Standard Time)</dateModified>
	</head>
	<body>
		<outline text="Modern Testing (MT)">
			<outline text="principles">
				<outline text="https://www.angryweasel.com/ABTesting/modern-testing-principles/"></outline>
				<outline text="Why Do We have MT Principles?">
					<outline text="WHAT GOT US HERE WON"T GET AS THERE">
						<outline text="MT is looking how to get "THERE"">
							<outline text="Moving test from cost center to cost benefit "></outline>
							<outline text="Being Force multiplier"></outline>
						</outline>
					</outline>
					<outline text="Software is much easier to produce"></outline>
					<outline text="Thanks to advancements in Continuous Delivery, the customer has much more options to choose from">
						<outline text="Companies are shipping faster"></outline>
					</outline>
					<outline text="It's much easier to compete with any company">
						<outline text="For customers, the switching cost has gone way down"></outline>
					</outline>
				</outline>
				<outline text="The principles are not just theory">
					<outline text="They are based on Experience and observation"></outline>
				</outline>
				<outline text="Why modern testing">
					<outline text="To make contrast with Traditional ">
						<outline text="Traditional testing is not only a cost but also delay "></outline>
					</outline>
				</outline>
				<outline text="Principle 1">
					<outline text="Our priority is improving the business.">
						<outline text="
What it means to improve the business?">
							<outline text="MTer needs to be seen as positive influence"></outline>
							<outline text="Boiling Frogs">
								<outline text="Adoption has to be gradual "></outline>
							</outline>
							<outline text="Delta from Idea to deployments is rapid "></outline>
							<outline text="Get that mvp out with just enough quality to get feedback from customers "></outline>
							<outline text="“You don’t get value from engineering effort until it is in customer hands”">
								<outline text="Think not only how to get it out but what’s next "></outline>
							</outline>
							<outline text="No one tests your product better than your customer">
								<outline text="what in case of software houses? They don't have product per se"></outline>
							</outline>
							<outline text="There are bugs and bugs that customer cares about "></outline>
							<outline text="The GOAL">
								<outline text="Short Term">
									<outline text="Provide Value to customer Frequently"></outline>
								</outline>
								<outline text="Long Term">
									<outline text="Making sure Principle are Followed"></outline>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 2">
					<outline text="We accelerate the team, and use models like Lean Thinking and the Theory of Constraints to help identify, prioritize and mitigate bottlenecks from the system.">
						<outline text="WHAT">
							<outline text="Our goal is to accelerate team ">
								<outline text="that doesn't mean "we have to go fast"">
									<outline text="Instead we are force multiplier"></outline>
								</outline>
							</outline>
							<outline text="its about">
								<outline text="adaptiblity"></outline>
								<outline text="Reaction"></outline>
								<outline text="???">
									<outline text="Brent went on tagnent and never finished his thought."></outline>
								</outline>
							</outline>
							<outline text="Lean Principles">
								<outline text="Deliver fast by managing the flow "></outline>
								<outline text="source: https://www.lean.org/WhatsLean/Principles.cfm"></outline>
							</outline>
							<outline text="Books to read">
								<outline text="The Goal: A Business Graphic Novel"></outline>
								<outline text="Phonix Project"></outline>
								<outline text="Lean Thinking"></outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="Don’t forget MT context"></outline>
							<outline text="By focusing the MT Practitioner on identifying their role as acceleration” ">
								<outline text="this model were chosen because they are proven"></outline>
							</outline>
							<outline text="It’s important cause far to much of The TEST is reverse of this">
								<outline text="they create the bottleneck instead of resolving them">
									<outline text="Example: stabilization period just before release"></outline>
									<outline text="It’s easier to "build quality In" instead of trying to test "quality in""></outline>
									<outline text="Test Complete date ">
										<outline text="No i don't mean the tool"></outline>
										<outline text="“If you test after test complete you will find bugs and that will cause us to miss the deadline""></outline>
									</outline>
								</outline>
							</outline>
						</outline>
						<outline text="HOW">
							<outline text="This mantra is About completion and predictability not about value in order to accelerate you need mechanism to identify what value is and what the next bottleneck">
								<outline text="Mt don’t want testing to be viewed as bottle neck "></outline>
							</outline>
							<outline text="Quality is problem solved to humans being"></outline>
							<outline text="Fast feedback loop is critical in context of understanding what is quality "></outline>
							<outline text="By Balancing fallacy of value with failure to launch"></outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 3">
					<outline text="We are a force for continuous improvement, helping the team adapt and optimize in order to succeed, rather than providing a safety net to catch failures.">
						<outline text="WHAT">
							<outline text="“We are going to favour continuously adapting and improving above safety net presentation model.”">
								<outline text="Thou shall kill your safety net">
									<outline text="Traditional testing is treated as safty net"></outline>
								</outline>
							</outline>
							<outline text="It’s wrong that testers feel validated by the fact the developers don’t want to test.">
								<outline text="If we are going to move quality upstream, we have to retrain developers without the safety net">
									<outline text="“Too many people think the quality is limited to testing “"></outline>
								</outline>
							</outline>
							<outline text="Code correctnes">
								<outline text="The tester can coach code correctness, but devs own it. "></outline>
								<outline text="Developers have to learn from their mistakes. ">
									<outline text="Continuous improvement is about not being afraid of making mistakes but embracing them as a learning opportunity."></outline>
								</outline>
								<outline text="Isn’t unit testing a safety net too?">
									<outline text="Yes it is.  And it should be there.  TESTERS aren't though."></outline>
								</outline>
							</outline>
							<outline text="Safty net is a problem">
								<outline text="Example">
									<outline text=" Brent test harness lead to developers stopped using design patterns and ended doing code reviews. Cause automation would catch mistakes. - it’s terrible cause sloppy architecture can’t scale and is hard to maintain."></outline>
								</outline>
								<outline text="To remove safety net, you need also ensure minimal risk of getting harm and consequences of damage cannot be severe"></outline>
							</outline>
							<outline text="Continuous improvement">
								<outline text="getting better all the time">
									<outline text="Every time, *not* every half year, *not* every two weeks ">
										<outline text="ALL THE TIME"></outline>
									</outline>
								</outline>
								<outline text="Actionable vs vanity "></outline>
								<outline text="Kaizen">
									<outline text="looking for improvement every time everywhere "></outline>
									<outline text="reducing the waste."></outline>
									<outline text="Efficiency vs productivity "></outline>
								</outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="It’s a critical process change directly related to   Quality "></outline>
							<outline text="Testers are well suited to drive continuous improvement ">
								<outline text="Tester has to see the system as a whole because of this they can easily spot place for improvement "></outline>
								<outline text="Testers are specialists in asking questions "></outline>
							</outline>
						</outline>
						<outline text="HOW">
							<outline text="By measuring ">
								<outline text="Visibility "></outline>
							</outline>
							<outline text="Unified engineering ">
								<outline text="Specialists is a bottleneck!"></outline>
							</outline>
							<outline text="Lots of small changes "></outline>
							<outline text="Frequent retrospective (only 1-3 action)">
								<outline text="Testers are well suited for driving retros"></outline>
								<outline text="Also starfish  model for long term  retros"></outline>
							</outline>
							<outline text="A small vertical slices of architecture ">
								<outline text="MVP!"></outline>
							</outline>
							<outline text="Master branch owned by the business they can release it whenever they want"></outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 4">
					<outline text="We care deeply about the quality culture of our team, and we coach, lead, and nurture the team towards a more mature quality culture.">
						<outline text="WHAT">
							<outline text="Quality culture and leadership "></outline>
							<outline text="Testers need to  stop being passive"></outline>
							<outline text="Quality culture">
								<outline text="Quality">
									<outline text="is not Bugs"></outline>
									<outline text="is not code correctnes"></outline>
									<outline text="is user reaction to what you built ">
										<outline text="What is a higher quality app with no bugs but with few users, or app with lots of bugs but 100k users?"></outline>
									</outline>
									<outline text="is about eliminating friction (enchanting positive, reducing negativities)"></outline>
								</outline>
								<outline text="Alan Defintion">
									<outline text="The shared mindset that delivering high-quality software to the customer is our top priority and all our practices support this effort"></outline>
								</outline>
								<outline text="Bren Definiton">
									<outline text="IT is how do we build healthy, actives, not intuition based, useful view of users empathy within the organisation, caring about problems that users have "></outline>
								</outline>
								<outline text="Getting people closer to understanding the problems that users are facing, how software developers are geared to solve it and how to stay current. ">
									<outline text="Getting people closer to understanding the problems that users are facing, how software developers are geared to solve it and how to stay current. "></outline>
									<outline text="“Hey, customer are you happier ?”"></outline>
								</outline>
								<outline text="What it mature Quality culture">
									<outline text="It is maturity model use with caution ">
										<outline text="its alan model - it doesn't has to work for you"></outline>
									</outline>
									<outline text="Testing breadth ">
										<outline text="infancy example">
											<outline text="functional testing"></outline>
										</outline>
										<outline text="adulthood example">
											<outline text="contextual testing"></outline>
										</outline>
									</outline>
									<outline text="Quality test ownership ship">
										<outline text="infancy example">
											<outline text="Tester are doing all the testing"></outline>
										</outline>
										<outline text="adulthood example">
											<outline text="Testers are coaches"></outline>
											<outline text="No testeres needed, cause team gets it"></outline>
										</outline>
									</outline>
									<outline text="Bug life cycle ">
										<outline text="infancy example">
											<outline text="bug backlog"></outline>
										</outline>
										<outline text="adulthood example">
											<outline text="zero bug policy"></outline>
										</outline>
									</outline>
									<outline text="how do you use code corretnes tools"></outline>
									<outline text="Data analysis ">
										<outline text="infancy example">
											<outline text="oblivous"></outline>
										</outline>
										<outline text="adulthood example">
											<outline text="data centric"></outline>
										</outline>
									</outline>
									<outline text="Development approach ">
										<outline text="infancy example">
											<outline text="ad-hoc"></outline>
										</outline>
										<outline text="adulthood example">
											<outline text="super small pathes"></outline>
										</outline>
									</outline>
									<outline text="Learn and improvement ">
										<outline text="infancy example">
											<outline text="no learning happens">
												<outline text="retrospectives are for whining"></outline>
											</outline>
										</outline>
										<outline text="adulthood example">
											<outline text="every failure is oportunity to learn">
												<outline text="and oportunity is taken"></outline>
											</outline>
										</outline>
									</outline>
									<outline text="Leadership support ">
										<outline text="infancy example"></outline>
										<outline text="adulthood example">
											<outline text="good quality pratices are  praised suported and celebrated"></outline>
										</outline>
										<outline text="read book ">
											<outline text="Book leadership on the line "></outline>
										</outline>
									</outline>
								</outline>
							</outline>
							<outline text="ADKAR Model">
								<outline text="source ">
									<outline text="https://www.prosci.com/adkar"></outline>
								</outline>
								<outline text="Awareness"></outline>
								<outline text="Desire"></outline>
								<outline text="Knowledge"></outline>
								<outline text="Abilty"></outline>
								<outline text="Reinforcment"></outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="The reason is we want feedback from our customers more often">
								<outline text="we want to understand and react to what they are doing,">
									<outline text=" we want to reduce risk in the ability to do that"></outline>
								</outline>
							</outline>
							<outline text="To work in the way we want to function, to keep, retain and engage more users we need the quality culture "></outline>
							<outline text="to move testing">
								<outline text="From Risk minimalisation">
									<outline text="to reacting to knowledge gained. "></outline>
								</outline>
							</outline>
						</outline>
						<outline text="HOW">
							<outline text="Unless the whole team has a common understanding of the problem trying to solve it is pointless "></outline>
							<outline text="Small Batches "></outline>
							<outline text="Knowledge sharing (software is knowledge works)"></outline>
							<outline text="Try stuff -> fail -> learn ">
								<outline text="Experiment "></outline>
								<outline text="Don’t make sweeping changes at once "></outline>
								<outline text="Small changes, and don’t give up">
									<outline text="Don’t try to change all at once "></outline>
								</outline>
							</outline>
							<outline text="Reaping the band-aid works only when people are ready."></outline>
							<outline text="Brent example on slack TL:DR verion">
								<outline text="my history: most time as QA, then as dev, now DS.  I went to dev as a manager. Half of my dev were old school we dont test and half were ex Testers.  3 things I did to start: 0 bug backlog allowed , trained everyone on TDD , and lastly, bugs will not be fixed by the code author.">
									<outline text="After learning/rumbling period was over, the whole team mentioned they would not ever go back to old ways...."></outline>
									<outline text="bugs will NOT be fixed by the code author?">
										<outline text="is the social pressure...   teammates do not appreciate having to fix a bug in code *you* should have tested....  motivates correct behavior in long term.">
											<outline text="Even better is to assign bug fixing to the peeps who approved the checkin"></outline>
											<outline text="What about toxicty and hostily">
												<outline text="combine with retrospective "></outline>
												<outline text="and a clear non-negotiable expectation that the team works as a team "></outline>
											</outline>
										</outline>
										<outline text=" great way for knowledge sharing about code."></outline>
									</outline>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 5">
					<outline text="We believe that the customer is the only one capable to judge and evaluate the quality of our product">
						<outline text="WHAT">
							<outline text="Definition customer - it is a human who takes a dependency on what you are releasing, and that human can make decisions what quality is "></outline>
							<outline text="It is not about preventing harm ">
								<outline text="How do we help business to go faster"></outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="Customers don’t want software; they want the problem solved."></outline>
							<outline text="It is seductive to believe “hey I am doing it forever I know what I am doing "></outline>
							<outline text="There is a risk in trust that QA belife in requirements doc and PMs , are solving a customer problem ">
								<outline text="which is not often true"></outline>
								<outline text="Features are developed cause we think they are cool, not because It solves problems. "></outline>
								<outline text="Quite often asking teams">
									<outline text="Q: “What problem it solves? “">
										<outline text="lead to answer">
											<outline text="“They will use it”">
												<outline text="Q2:“What value does it bring? “ ">
													<outline text="“They will use it”"></outline>
												</outline>
											</outline>
										</outline>
									</outline>
								</outline>
							</outline>
							<outline text="Need vs want">
								<outline text="Usually, you need to decompose the want to Find the need"></outline>
								<outline text="B2B">
									<outline text="Even in B2B case delivering what customer want not what they need, may end with customer leaving and never returning"></outline>
								</outline>
							</outline>
							<outline text="Example of building wrong thing ">
								<outline text="Microsoft Kin">
									<outline text="https://en.wikipedia.org/wiki/Microsoft_Kin"></outline>
								</outline>
							</outline>
						</outline>
						<outline text="HOW">
							<outline text="Ask your self">
								<outline text="Who is my customer ?">
									<outline text="What is the case when I am delivering software to business?">
										<outline text="Who is customer then? Buissness or its customer?">
											<outline text="Both"></outline>
											<outline text="You need to be able to help your customers help their customers."></outline>
										</outline>
									</outline>
									<outline text="End users who benefit from software you are producing."></outline>
									<outline text="Testers are not customers.  ">
										<outline text="Unless you are selling software for testers."></outline>
									</outline>
								</outline>
							</outline>
							<outline text="Requirements from the business should be treated as hypothesis "></outline>
							<outline text=" For each feature request you can ask question:">
								<outline text="“Imagine you had that what would you do with it?”"></outline>
							</outline>
							<outline text="Leaders ship is disappointing people at level they can absorb ">
								<outline text="ergo">
									<outline text="Small changes!"></outline>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 6">
					<outline text="We use data extensively to deeply understand customer usage and then close the gaps between product hypotheses and business impact.">
						<outline text="WHAT">
							<outline text="Validating hypotheses doesn’t mean pushing buggy software."></outline>
							<outline text="Your reaction time is important. "></outline>
							<outline text="we need to be able to know">
								<outline text="What metrics meter "></outline>
								<outline text="What part of your product "></outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="Data is critical to scale "></outline>
							<outline text="As long as you have good telemetry, you can find and fix bugs "></outline>
							<outline text="Relaying on telemetry and customer data doesn’t mean it is using the customer as testers "></outline>
							<outline text="Customer don’t care about test cases run, nor about  a code coverage ">
								<outline text="They care if theirs problem was solved"></outline>
							</outline>
						</outline>
						<outline text="HOW">
							<outline text="Instrument the hell out of your software "></outline>
							<outline text="Use automation as a load generator and let the telemetry be a test oracle."></outline>
							<outline text="Data tells you where to focus."></outline>
							<outline text="Check episode 82"></outline>
							<outline text="Once the product ship - look at the data and try to figure out which testing effort was wasted.">
								<outline text=" Which feature is barely used? ">
									<outline text="It will help you count What is the ROI of current testing "></outline>
								</outline>
							</outline>
							<outline text="Who values your product?"></outline>
						</outline>
					</outline>
				</outline>
				<outline text="Principle 7">
					<outline text="We expand testing abilities and knowhow across the team; understanding that this may reduce (or eliminate) the need for a dedicated testing specialist. ">
						<outline text="WHAT">
							<outline text="Modern Tester doesn’t test">
								<outline text="It is also transitory role"></outline>
							</outline>
							<outline text="If you follow all principles you may not need testing specialists "></outline>
							<outline text="No testing isn’t dead">
								<outline text="but testers are on their way out "></outline>
							</outline>
						</outline>
						<outline text="WHY">
							<outline text="Testing is not a unique skill for testers others can do it too"></outline>
							<outline text="Testing is an activity, not a job."></outline>
						</outline>
						<outline text="HOW">
							<outline text="There is a risk that Dev manager may not be able to deal with the mixed team - he will need a boiling frog"></outline>
							<outline text="You need people that genuinely understand testing to help with the transition."></outline>
							<outline text="At the beginning you need experts to teach others how to test.">
								<outline text="Aka Bootstrapping effort"></outline>
							</outline>
							<outline text="There is social pressure to conform">
								<outline text=" when you achieve quality culture">
									<outline text="it will be kept with minimal help, unless some one will actively try to change it"></outline>
								</outline>
							</outline>
							<outline text="If you are a manager start working with your people. and easing them into transition">
								<outline text="    Give them a new place for their career to go">
									<outline text="And that new place is a positive one."></outline>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
			</outline>
			<outline text="Historical information">
				<outline text="Episode 77" _note="https://www.angryweasel.com/ABTesting/ab-testing-episode-77-the-conception-of-the-modern-testing-principles/">
					<outline text="General">
						<outline text="Based on agile principles" _note="I have taken them from here:&#10;https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/">
							<outline text="1.  Our highest priority is to satisfy the customer through early and continuous delivery of valuable software."></outline>
							<outline text="2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage."></outline>
							<outline text="3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale."></outline>
							<outline text="4. Business people and developers must work together daily throughout the project."></outline>
							<outline text="5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done."></outline>
							<outline text="6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation."></outline>
							<outline text="7.  Working software is the primary measure of progress."></outline>
							<outline text="8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely."></outline>
							<outline text="9. Continuous attention to technical excellence and good design enhances agility."></outline>
							<outline text="10. Simplicity--the art of maximizing the amount of work not done--is essential."></outline>
							<outline text="11. The best architectures, requirements, and designs emerge from self-organizing teams."></outline>
							<outline text="12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly."></outline>
						</outline>
						<outline text="Who is customer for MT Principles?"></outline>
						<outline text="Modern Tester">
							<outline text="Existed in this version"></outline>
							<outline text="Tester as coach "></outline>
							<outline text="He is not Champion of quality"></outline>
							<outline text="Responsible for quality culture"></outline>
						</outline>
						<outline text="Principle importance">
							<outline text="Alan think all are equaly important"></outline>
							<outline text="Brent thinks principle 1 is most important"></outline>
						</outline>
					</outline>
					<outline text="Principlaces first version">
						<outline text="1. The customer is the only one suitable to judge and evaluate the quality of our software">
							<outline text="it is combination of Testing Discipline , agile and Budisness as data"></outline>
						</outline>
						<outline text="2. We apply the theory of constraints to identify, prioritize and mitigate bottlenecks from the system (and accelerate the team).">
							<outline text="Constant re-evaluate of bottle necks "></outline>
							<outline text="Testing often is a bottle neck but rarly is a root cause of  one."></outline>
						</outline>
						<outline text="3. We are not the safety net for software correctness – we focus on improving the business, and not the code.">
							<outline text="Testing is not responsible for code correctness">
								<outline text="Software quality!=code correctness "></outline>
							</outline>
						</outline>
						<outline text="4. We are responsible for the quality culture of our team, and are accountable for helping and coaching the team in this regard."></outline>
						<outline text="5. We use data to deeply understand customer usage and customer pain."></outline>
						<outline text="6. Embrace continuous improvement, and help the team adapt and optimize in order to solve customer pain">
							<outline text="neither It doesn’t need to be now, nor it doesn’t have to be perfect- balance ">
								<outline text="its about ballance"></outline>
							</outline>
						</outline>
						<outline text="7. We strive to reduce or eliminate the need for a dedicated testing specialist on our teams by increasing testing abilities and knowhow across the team."></outline>
					</outline>
				</outline>
			</outline>
			<outline text="How it aplies to polish market?">
				<outline text="See principle #5 - B2B "></outline>
			</outline>
			<outline text="FAQ">
				<outline text="Q: “These principles sound like Agile things. Why are they called out separately in MT principles ?“ ">
					<outline text="A: Agile is more fundamental than MT and addressees generic issues. MT principles are more focused on addressing testing issues"></outline>
				</outline>
				<outline text="Q: Most of them sound more like managers' principles than testers">
					<outline text="There is no MT specialist but MT activities are part of unified development, MT practitioner can take PM hat from time to time if needed">
						<outline text="He is optimizer "></outline>
						<outline text="Reducing  waste and increasing value"></outline>
						<outline text="Follower of MT notices patterns"></outline>
						<outline text="unified development defintion">
							<outline text="https://testastic.wordpress.com/2016/01/03/the-combined-engineering-software-model/"></outline>
						</outline>
					</outline>
				</outline>
			</outline>
			<outline text="AB Testing episodes to listen">
				<outline text="basics">
					<outline text="77">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-77-the-conception-of-the-modern-testing-principles/"></outline>
						<outline text="general: who is customer of the principles?"></outline>
					</outline>
					<outline text="78">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-78-digging-in-on-modern-testing-principles/"></outline>
					</outline>
				</outline>
				<outline text="Principle 1">
					<outline text="81">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-81-business-rulz/"></outline>
					</outline>
				</outline>
				<outline text="Principle 2">
					<outline text="83">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-83-accelerating-the-team/"></outline>
					</outline>
				</outline>
				<outline text="Principle 3">
					<outline text="84">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-84-stories-about-changes-and-nets/"></outline>
					</outline>
				</outline>
				<outline text="Principle 4">
					<outline text="85">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-85-the-community-principle/"></outline>
					</outline>
				</outline>
				<outline text="Principle 5">
					<outline text="86">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-86-not-the-customers-champion/"></outline>
					</outline>
					<outline text="92">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-92-customers-bugs-and-triangles/"></outline>
					</outline>
				</outline>
				<outline text="Principle 6">
					<outline text="87">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-87-the-one-about-data/"></outline>
					</outline>
					<outline text="82">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-82-brent-talks-to-alan-about-data/"></outline>
					</outline>
				</outline>
				<outline text="principle 7">
					<outline text="88">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-88-testing-isnt-dead-testers-otoh/"></outline>
					</outline>
				</outline>
				<outline text="Modern testing vs Context driven">
					<outline text="94">
						<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-94-modern-testing-meets-context-driven-testing/"></outline>
					</outline>
				</outline>
				<outline text="https://testastic.wordpress.com/2016/09/05/whats-so-special-about-specialists/"></outline>
				<outline text="Transition guide">
					<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-93-the-quality-culture-transition-guide/"></outline>
				</outline>
				<outline text="slack"></outline>
				<outline text="traditional vs modern debate">
					<outline text="https://www.angryweasel.com/ABTesting/ab-testing-episode-67/"></outline>
				</outline>
			</outline>
			<outline text="PARKING LOT - Place for notes without home">
				<outline text="in martial art black belt is begining up to that point you just learn what you need to start"></outline>
				<outline text="Modern testing principles not modern testers principles "></outline>
				<outline text="Specialists is bottleneck"></outline>
				<outline text="...automation especially UI black hole of payroll "></outline>
			</outline>
		</outline>
	</body>
</opml>
